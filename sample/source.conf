# source.conf: BIRD version <2.17

######## function test_empty_void1 [START] ########
# return type: empty (void), don't add `->` keyword
function test_empty_void1()
{
  if (65535,0,666) ~ bgp_large_community then dest = RTD_BLACKHOLE;
}
######## function test_empty_void1 [END] ########

######## function test_empty_void2 [START] ########
# return type: empty, don't add `->` keyword
function test_empty_void2(){
    pub_prefix_v4_community();
    pub_prefix_v6_community();
    bgp_large_community.delete([(65535, *, *)]);  
    bgp_large_community.delete([(65531, *, *)]);
    unset(bgp_med);
}
######## function test_empty_void2 [END] ########

######## function test_bgp_path_prepend_void3 [START] ########
# return type: empty, don't add `->` keyword
function test_bgp_path_prepend_void3(int MyASNumber)


{
  if (MyASNumber,220,1) ~ bgp_large_community then {
    bgp_path.prepend(MyASNumber); # x1
  }
  if (MyASNumber,220,2) ~ bgp_large_community then {
     bgp_path.prepend(MyASNumber); # x1
     bgp_path.prepend(MyASNumber); # x2
  }
  if (MyASNumber,220,3) ~ bgp_large_community then {
    bgp_path.prepend(MyASNumber); # x1
    bgp_path.prepend(MyASNumber); # x2
    bgp_path.prepend(MyASNumber); # x3
  }
  if (MyASNumber,220,4) ~ bgp_large_community then {
    bgp_path.prepend(MyASNumber); # x1
    bgp_path.prepend(MyASNumber); # x2
    bgp_path.prepend(MyASNumber); # x3
    bgp_path.prepend(MyASNumber); # x4
  }
  if (MyASNumber,220,5) ~ bgp_large_community then {
    bgp_path.prepend(MyASNumber); # x1
    bgp_path.prepend(MyASNumber); # x2
    bgp_path.prepend(MyASNumber); # x3
    bgp_path.prepend(MyASNumber); # x4
    bgp_path.prepend(MyASNumber); # x5
  }
}
######## function test_bgp_path_prepend_void3 [END] ########

######## function test_bgp_path [START] ########
# return type: string, should add `-> string` keyword
function test_bgp_path()
bgppath P;
bgppath P2; {
    return "path, first: ", P.first, ", last: ", P.last;
    return "path length: ", P.len;
    if P.empty then {
        return "path is empty";
    }
    P.prepend(233);
    P.delete(233);
    P.delete([64512..65535]);
    P.filter([64512..65535]);

    P2 = delete(P, 233)
    P2 = filter(P, [64512..65535])
    return "done";
}
######## function test_bgp_path [END] ########

######## function test_bgp_large_community [START] ########

# return type: pair (65500, 10), should add `-> pair` keyword
function test_bgp_large_community(int AS, int REGION, int NODE_ID)
-> pair (int, int) {
  if (65535, 10, 10) ~ bgp_large_community then return (10, 10);
  if (65535, 3, NODE_ID) ~ bgp_large_community then return (3, NODE_ID);
  if (65535, 2, REGION) ~ bgp_large_community then return (2, REGION);
  if (65535, 4, AS) ~ bgp_large_community then return (4, AS);
  return (1, 1);
}
######## function test_bgp_large_community [END] ########


######## function test_prefix_return [START] ########
# return type: prefix, should add `-> prefix` keyword
function test_prefix_return_base1()
-> prefix {
    if 1.0.0.0/24 ~ RTS_STATIC then return 1.0.0.0/24;
    return 2.0.0.0/24;
}
######## function test_prefix_return [END] ########

######## function test_prefix_return_base2 [START] ########
# return type: prefix, should add `-> prefix` keyword
function test_prefix_return_base2()
-> prefix {
    if fe80::1/64 ~ RTS_STATIC then return net;
    return fd00::1.mask(64);
}
######## function test_prefix_return_base2 [END] ########

######## function test_prefix_return_advanced [START] ########
# return type: prefix, should add `-> prefix` keyword
function test_prefix_return_advanced()
-> prefix {
    if net ~ RTS_STATIC then return net;
    return net.mask(16);
}
######## function test_prefix_return_advanced [END] ########

######## function test_set_return [START] ########
# return type: set, should add `-> set` keyword
function test_set_return()
-> set {
    return {1, 2, 3, 4};
}
######## function test_set_return [END] ########

######## function test_int_return [START] ########
# return type: int, should add `-> int` keyword
function test_int_return()
-> int {
    return 1;
}
######## function test_int_return [END] ########